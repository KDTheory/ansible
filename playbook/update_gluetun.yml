---
- name: Get the Gluetun container port
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get the Gluetun container port
      command: docker inspect -f '{{"{{"}}range .NetworkSettings.Ports{{"}}"}}{{"{{"}}.{{"}}"}}{{"{{"}}end{{"}}"}}' gluetun
      register: gluetun_port_output

    - name: Extract port number
      set_fact:
        gluetun_port: "{{ gluetun_port_output.stdout | regex_search(':(\\d+)', '\\1') }}"
      delegate_to: localhost

    - name: Save Gluetun port to a file
      copy:
        content: "{{ gluetun_port }}"
        dest: /tmp/gluetun_port.txt
      delegate_to: localhost

- name: Copy Gluetun port file to seedbox
  hosts: seedbox
  gather_facts: false
  tasks:
    - name: Copy Gluetun port file from controller to seedbox
      copy:
        src: /tmp/gluetun_port.txt
        dest: /tmp/gluetun_port.txt
        remote_src: no

    - name: Load Gluetun port from file
      slurp:
        src: /tmp/gluetun_port.txt
      register: gluetun_port_file

    - name: Set gluetun_port from file content
      set_fact:
        global_gluetun_port: "{{ gluetun_port_file.content | b64decode }}"

    - name: Check current port in .rtorrent.rc for user kevin
      command: grep 'port_range = ' /home/kevin/config/rutorrent-kevin/rtorrent/.rtorrent.rc
      register: current_port_kevin
      changed_when: false

    - name: Check current port in .rtorrent.rc for user alexis
      command: grep 'port_range = ' /home/kevin/config/rutorrent-alexis/rtorrent/.rtorrent.rc
      register: current_port_alexis
      changed_when: false

    - name: Ensure current_port_kevin_parsed is defined
      set_fact:
        current_port_kevin_parsed: "{{ '' }}"
      when: current_port_kevin is not defined or current_port_kevin.stdout == ""

    - name: Ensure current_port_alexis_parsed is defined
      set_fact:
        current_port_alexis_parsed: "{{ '' }}"
      when: current_port_alexis is not defined or current_port_alexis.stdout == ""

    - name: Parse port from rtorrent.rc content for user kevin
      set_fact:
        current_port_kevin_parsed: "{{ current_port_kevin.stdout | regex_search('port_range = (\\d+)-(\\d+)', '\\1') }}"
      when: current_port_kevin is defined and current_port_kevin.stdout != ""

    - name: Parse port from rtorrent.rc content for user alexis
      set_fact:
        current_port_alexis_parsed: "{{ current_port_alexis.stdout | regex_search('port_range = (\\d+)-(\\d+)', '\\1') }}"
      when: current_port_alexis is defined and current_port_alexis.stdout != ""

    - name: Set port_changed for kevin if port is different
      set_fact:
        port_changed_kevin: true
      when: current_port_kevin_parsed != global_gluetun_port

    - name: Set port_changed for alexis if port is different
      set_fact:
        port_changed_alexis: true
      when: current_port_alexis_parsed != global_gluetun_port

    - name: Update .rtorrent.rc for user kevin if port has changed
      lineinfile:
        path: /home/kevin/config/rutorrent-kevin/rtorrent/.rtorrent.rc
        regexp: 'port_range = '
        line: "port_range = {{ global_gluetun_port }}-{{ global_gluetun_port }}"
      when: port_changed_kevin is defined and port_changed_kevin

    - name: Update .rtorrent.rc for user alexis if port has changed
      lineinfile:
        path: /home/kevin/config/rutorrent-alexis/rtorrent/.rtorrent.rc
        regexp: 'port_range = '
        line: "port_range = {{ global_gluetun_port }}-{{ global_gluetun_port }}"
      when: port_changed_alexis is defined and port_changed_alexis

- name: Copy Gluetun port file to portainer
  hosts: portainer
  gather_facts: false
  tasks:
    - name: Copy Gluetun port file from controller to portainer
      copy:
        src: /tmp/gluetun_port.txt
        dest: /tmp/gluetun_port.txt
        remote_src: no

    - name: Load Gluetun port from file
      slurp:
        src: /tmp/gluetun_port.txt
      register: gluetun_port_file

    - name: Set gluetun_port from file content
      set_fact:
        global_gluetun_port: "{{ gluetun_port_file.content | b64decode }}"

    - name: Update stack for kevin with new port
      uri:
        url: "{{ lookup('env', 'PORTAINER_URL') }}/api/stacks/25/update?endpointId=1"
        method: PUT
        headers:
          Authorization: "Bearer {{ lookup('env', 'PORTAINER_API_KEY') }}"
          Content-Type: "application/json"
        body: "{\"env\": [{\"name\": \"GLUETUN_PORT\", \"value\": \"{{ global_gluetun_port }}\"}]}"
        body_format: json
      register: update_result_kevin
      when: hostvars['seedbox']['port_changed_kevin'] is defined and hostvars['seedbox']['port_changed_kevin']

    - name: Update stack for alexis with new port
      uri:
        url: "{{ lookup('env', 'PORTAINER_URL') }}/api/stacks/24/update?endpointId=1"
        method: PUT
        headers:
          Authorization: "Bearer {{ lookup('env', 'PORTAINER_API_KEY') }}"
          Content-Type: "application/json"
        body: "{\"env\": [{\"name\": \"GLUETUN_PORT\", \"value\": \"{{ global_gluetun_port }}\"}]}"
        body_format: json
      register: update_result_alexis
      when: hostvars['seedbox']['port_changed_alexis'] is defined and hostvars['seedbox']['port_changed_alexis']

    - name: Set restart flag for kevin if stack update has changed
      set_fact:
        stack_restart_required_kevin: true
      when: update_result_kevin.changed

    - name: Set restart flag for alexis if stack update has changed
      set_fact:
        stack_restart_required_alexis: true
      when: update_result_alexis.changed

    - name: Restart stack for kevin if needed
      uri:
        url: "{{ lookup('env', 'PORTAINER_URL') }}/api/stacks/25/restart?endpointId=1"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env', 'PORTAINER_API_KEY') }}"
          Content-Type: "application/json"
      when: stack_restart_required_kevin is defined and stack_restart_required_kevin

    - name: Restart stack for alexis if needed
      uri:
        url: "{{ lookup('env', 'PORTAINER_URL') }}/api/stacks/24/restart?endpointId=1"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env', 'PORTAINER_API_KEY') }}"
          Content-Type: "application/json"
      when: stack_restart_required_alexis is defined and stack_restart_required_alexis
