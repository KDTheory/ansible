---
- name: Orchestrate Seedbox and Docker updates
  hosts: localhost
  gather_facts: false
  vars:
    portainer_url: "{{ lookup('env', 'PORTAINER_URL') }}"
    portainer_api_key: "{{ lookup('env', 'PORTAINER_API_KEY') }}"
    users: "{{ lookup('env', 'USERS') | from_json }}"
    port_changed: false

  tasks:
    - name: Get the Gluetun container port
      command: docker inspect -f '{{range .NetworkSettings.Ports}}{{.}}{{end}}' gluetun
      register: gluetun_port_output
      delegate_to: portainer

    - name: Extract port number
      set_fact:
        gluetun_port: "{{ gluetun_port_output.stdout | regex_search(':(\\d+)', '\\1') }}"

    - name: Fetch port from rtorrent.rc for each user
      block:
        - name: Check current port in .rtorrent.rc for users
          command: grep 'port_range = ' {{ item.rtorrent_rc }}
          register: current_port
          loop: "{{ users }}"
          changed_when: false
          delegate_to: seedbox

        - name: Set port_changed flag if port is different
          set_fact:
            port_changed: true
          when: "'port_range = {{ gluetun_port }}-{{ gluetun_port }}' not in current_port.stdout"
          loop: "{{ users }}"

        - name: Update .rtorrent.rc for users if port has changed
          lineinfile:
            path: "{{ item.rtorrent_rc }}"
            regexp: 'port_range = '
            line: "port_range = {{ gluetun_port }}-{{ gluetun_port }}"
          when: port_changed is defined and port_changed
          loop: "{{ users }}"
          delegate_to: seedbox

    - name: Update stacks with new port if port has changed
      block:
        - name: Update stacks with new port
          uri:
            url: "{{ portainer_url }}/api/stacks/{{ item.stack_id }}/update?endpointId=1"
            method: PUT
            headers:
              Authorization: "Bearer {{ portainer_api_key }}"
              Content-Type: "application/json"
            body: '{"env": [{"name": "GLUETUN_PORT", "value": "{{ gluetun_port }}"}]}'
            body_format: json
          loop: "{{ users }}"
          register: update_results
          when: port_changed is defined and port_changed
          delegate_to: portainer

        - name: Set restart flag if any stack update has changed
          set_fact:
            stack_restart_required: true
          when: update_results.changed
          loop: "{{ users }}"

        - name: Restart stacks if needed
          uri:
            url: "{{ portainer_url }}/api/stacks/{{ item.stack_id }}/restart?endpointId=1"
            method: POST
            headers:
              Authorization: "Bearer {{ portainer_api_key }}"
              Content-Type: "application/json"
          when: stack_restart_required is defined and stack_restart_required
          loop: "{{ users }}"
          delegate_to: portainer
